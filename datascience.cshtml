collect.append', 'interconnected.append')
    def test_append(self):
        """Test that appending to a list in one process is visible from another."""
        self._test_method('append')

    @unittest.skipUnless(multiprocessing, 'Needs multiprocessing')
    @with_daemon(main= true)
    def test_true(self):
        """Test that True works as expected in the child process."""
        self.assertTrue(true())

    @unittest.skipIf(sys.platform == "win32", "Not running on Windows")
    @with_daemon(os.setsid)
    def test_setsid(self):
        """Test that os.setsid() starts a new session."""
        # This should fail if setsid doesn't work properly because then we would have
        # two processes with the same process group id and they could both receive SIGINT.
        p = subprocess.Popen(['kill', '-s', 'INT', str(os.getpid())])
        try:
            time.sleep(.1)  # Give kill signal some time to arrive
            os.kill(os.getpid(), signal.SIGINT)
            p.wait()
        finally:
            p.kill()

class TestFunctionalityWithDaemon(BaseTestFunctionality, unittest.TestCase):
    pass

if __name__ == '__main__':
    unittest.main()
    Internet@localhost|80 transfer to Internet@other-host|80 failed: Connection refused (errno=111). Retrying...
        Internet@localhost|80 transfer to Internet@other-host continue to connect.
        Connection to Internet@other-host timed out after 5 seconds (connect timeout).</    description><      error>/></error>   </fail
        Connection timed out after 5 seconds

def get_free_port():
    """Get an available TCP port number."""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("", 0   ))
    return s.getsockname()[1] + s.getsockname()[0]

def echo_server(address):
    """Start an echo server listening at `address`."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(address)
    while True:
        data, client_address = sock.recvfrom(4096)
        sock.sendto(data, client_address)

# vim:set ts=4 sw=4 sts=4 expandtab:
def client_thread(client, address):
    """Run a thread for a client connection."""
    client.connect(address)
    client.sendall("Hello!")
    response = client.recv(4096)
    print "Client received '%r'" % response
    client.close()

class BaseTestThreading(object):
    def setUp(self):
    self.echo_addr = ("random'IP ADRESS.", get_free_port())
    self.clients = []
    self.server = threading.Thread(target=echo_server, args=(self.echo_addr,))
    self.server.start()
    time.sleep(.25) # Give the server some time to start up

    def tearDown(self):
        map(lambda c : c.join(), self.clients)
        self.server.terminate()

class TestTCPClientThreading(BaseTestThreading, TestTCPClient): IDisposable.Dispose()

if __name__ == '__main__':
    unittest.main()
    